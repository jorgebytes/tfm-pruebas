name: Pipeline Desarrollo Seguro

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  # sast:
  #   name: SAST Analysis
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: SonarQube Scan
  #       uses: SonarSource/sonarqube-scan-action@v5
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  #     - name: Bandit Security Scan (Python)
  #       run: |
  #         pip install bandit
  #         bandit -r . -f json -o bandit-report.json

  #     - name: Upload Bandit Report
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: bandit-report
  #         path: bandit-report.json

  # sca:
  #   name: Dependency Vulnerability Scan
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Run OWASP Dependency-Check
  #       uses: dependency-check/Dependency-Check_Action@main
  #       id: depcheck
  #       with:
  #         project: 'tfm-prueba-1'
  #         path: '.'
  #         format: 'HTML'
  #         out: 'reports'
  #         args: '--failOnCVSS 7 --enableRetired'

  #     - name: Upload Dependency-Check Report
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: Dependency-Check Report
  #         path: reports

  dast:
      name: Pruebas DAST
      runs-on: ubuntu-latest
      
      steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create Docker network
        run: docker network create dast-network

      - name: Create ZAP working directory
        run: |
          mkdir -p ${{ github.workspace }}/zap-reports
          chmod 777 ${{ github.workspace }}/zap-reports

      - name: Build test application
        run: |
          docker build -t test-app:latest .
        
      - name: Start test application and wait for availability
        run: |
          echo "Starting application container..."
          docker run -d \
            --name test-app \
            --network dast-network \
            -p 8080:8080 \
            test-app:latest
          
          echo "‚úÖ Container started"
          echo "=== Container status ==="
          docker ps
          echo "=== Container logs (first 20 lines) ==="
          docker logs test-app | head -20
          
          # Funci√≥n para verificar conectividad
          check_app() {
            local max_attempts=12  # 2 minutos total
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt/$max_attempts - Checking application..."
              
              # Intentar diferentes endpoints comunes
              if curl -f -s --connect-timeout 5 --max-time 10 http://localhost:8080/health; then
                echo "Health endpoint responded"
                return 0
              elif curl -f -s --connect-timeout 5 --max-time 10 http://localhost:8080/; then
                echo "Root endpoint responded"
                return 0
              elif curl -f -s --connect-timeout 5 --max-time 10 http://localhost:8080/api/health; then
                echo "API health endpoint responded"
                return 0
              else
                # Verificar si al menos hay conexi√≥n TCP
                if nc -z localhost 8080; then
                  echo "Port 8080 is open but HTTP not ready yet..."
                else
                  echo "Port 8080 is not accessible"
                fi
              fi
              
              sleep 5
              attempt=$((attempt + 1))
            done
            
            return 1
          }
          
          # Ejecutar verificaci√≥n
          if check_app; then
            echo "üéâ Application is ready!"
          else
            echo "‚ùå Application failed to become ready after 2 minutes"
            echo "=== Container status ==="
            docker ps -a
            echo "=== Container logs ==="
            docker logs test-app
            echo "=== Network information ==="
            docker network ls
            docker network inspect dast-network
            echo "=== Port information ==="
            netstat -tlnp | grep :8080 || echo "Port 8080 not found in netstat"
            exit 1
          fi

      - name: Run ZAP Baseline Scan
        run: |
          docker run --rm \
            --name zap-scan \
            --network dast-network \
            -v ${{ github.workspace }}/zap-reports:/zap/wrk \
            -u root \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py \
            -t http://test-app:8080 \
            -r zap-baseline-report.html \
            -x zap-baseline-report.xml \
            -J zap-baseline-report.json \
            -a \
            -j

      # - name: Run ZAP Full Scan (m√°s exhaustivo)
      #   run: |
      #     docker run --rm \
      #       --name zap-full-scan \
      #       --network dast-network \
      #       -v ${{ github.workspace }}/zap-reports:/zap/wrk \
      #       -u root \
      #       ghcr.io/zaproxy/zaproxy:stable \
      #       zap-full-scan.py \
      #       -t http://test-app:8080 \
      #       -r zap-full-report.html \
      #       -x zap-full-report.xml \
      #       -J zap-full-report.json \
      #       -a \
      #       -j

      - name: Run Wapiti DAST Scan
        run: |
          docker run --rm \
            --name wapiti-scan \
            --network dast-network \
            -v ${{ github.workspace }}/zap-reports:/reports \
            wapiti3/wapiti:latest \
            wapiti -u http://test-app:8080 \
            --format html,json,xml \
            --output /reports/wapiti-report \
            --flush-attacks \
            --max-depth 3 \
            --max-links-per-page 50

      - name: Run Nikto Scan (herramienta adicional)
        run: |
          docker run --rm \
            --name nikto-scan \
            --network dast-network \
            -v ${{ github.workspace }}/zap-reports:/reports \
            sullo/nikto:latest \
            -h http://test-app:8080 \
            -output /reports/nikto-report.html \
            -Format html

      - name: Check application logs (debugging)
        if: always()
        run: |
          echo "=== Application logs ==="
          docker logs test-app || true

      - name: List generated reports
        if: always()
        run: |
          echo "=== Generated reports ==="
          ls -la ${{ github.workspace }}/zap-reports/

      - name: Upload ZAP Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-security-reports
          path: |
            ${{ github.workspace }}/zap-reports/zap-*.html
            ${{ github.workspace }}/zap-reports/zap-*.xml
            ${{ github.workspace }}/zap-reports/zap-*.json

      - name: Upload Wapiti Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: wapiti-security-reports
          path: |
            ${{ github.workspace }}/zap-reports/wapiti-report.*

      - name: Upload Nikto Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nikto-security-reports
          path: |
            ${{ github.workspace }}/zap-reports/nikto-report.html

      - name: Cleanup
        if: always()
        run: |
          docker stop test-app || true
          docker rm test-app || true
          docker network rm dast-network || true