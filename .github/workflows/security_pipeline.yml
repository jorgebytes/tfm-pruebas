name: Pipeline Desarrollo Seguro

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  sast-codeql:
    name: CodeQL SAST Analysis
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        language: ['python','javascript']

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Initizlize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality
      
      - name: CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  sast-sonarcloud:
    name: SAST Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: SonarQube Cloud Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  sca:
    name: Dependency analysis with Trivy
    runs-on: ubuntu-latest
    needs: [sast-codeql,sast-sonarcloud]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create reports directory
      run: mkdir -p reports/trivy

    - name: Build Docker image
      run: |
        docker build -t web-app:latest .

    - name: Run Trivy vulnerability scanner on repository packages and dependency files
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs' #This checks vulnerabilities on dependencies by checking requieremtnes.txt and similar files
        scan-ref: '.'
        format: 'sarif'
        output: 'reports/trivy/trivy-repo.sarif'

    - name: Run Trivy config scanner on IaC and Dockerfiles
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: '.'
        format: 'sarif'
        output: 'reports/trivy/trivy-config.sarif'

    - name: Run Trivy vulnerability scanner on Docker image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'web-app:latest'
        format: 'sarif'
        output: 'reports/trivy/trivy-image.sarif'

    - name: Upload Trivy SARIF results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: reports/trivy/trivy-repo.sarif
        category: "trivy-repository"
      if: always()

    - name: Upload Trivy Image SARIF results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: reports/trivy/trivy-image.sarif
        category: "trivy-image"
      if: always()

    - name: Upload Trivy Config SARIF results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: reports/trivy/trivy-config.sarif
        category: "trivy-config"
      if: always()

  dast:
      name: Pruebas DAST
      runs-on: ubuntu-latest
      needs: [sca]
      
      steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create Docker network
        run: docker network create dast-network

      - name: Create ZAP working directory
        run: |
          mkdir -p ${{ github.workspace }}/zap-reports
          chmod 777 ${{ github.workspace }}/zap-reports

      - name: Build test application
        run: |
          docker build -t test-app:latest .
        
      - name: Start test application and wait for it to be ready
        run: |
          docker run -d \
            --name test-app \
            --network dast-network \
            -p 5000:5000 \
            test-app:latest

          echo "Waiting for application to start..."
          sleep 30
          # Verificar que la aplicación responde
          timeout 60 bash -c 'until curl -f http://localhost:5000/health || curl -f http://localhost:5000/ ; do sleep 5; done'


      - name: Run ZAP Baseline Scan
        run: |
          docker run --rm \
            --name zap-scan \
            --network dast-network \
            -v ${{ github.workspace }}/zap-reports:/zap/wrk \
            -u root \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py \
            -t http://test-app:5000 \
            -r zap-baseline-report.html \
            -x zap-baseline-report.xml \
            -J zap-baseline-report.json \
            -I \
            -a \
            -j

      ###########################
      # ZAP Full Scan consumes a great time and resources,thus it is left commented. In order to execute it uncomment the code, being responsible of the usage of GitHub Actions minutes
      ###########################
      # - name: Run ZAP Full Scan (más exhaustivo)
      #   run: |
      #     docker run --rm \
      #       --name zap-full-scan \
      #       --network dast-network \
      #       -v ${{ github.workspace }}/zap-reports:/zap/wrk \
      #       -u root \
      #       ghcr.io/zaproxy/zaproxy:stable \
      #       zap-full-scan.py \
      #       -t http://test-app:5000 \
      #       -r zap-full-report.html \
      #       -x zap-full-report.xml \
      #       -J zap-full-report.json \
      #       -a \
      #       -j

      - name: Check application logs (debugging)
        if: always()
        run: |
          echo "=== Application logs ==="
          docker logs test-app || true

      - name: List generated reports
        if: always()
        run: |
          echo "=== Generated reports ==="
          ls -la ${{ github.workspace }}/zap-reports/

      - name: Upload ZAP Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-security-reports
          path: |
            ${{ github.workspace }}/zap-reports/zap-*.html
            ${{ github.workspace }}/zap-reports/zap-*.xml
            ${{ github.workspace }}/zap-reports/zap-*.json
      
      - name: Convert ZAP results to SARIF
        run: |
          # Install tools to convert XML into SARIF
          pip install sarif-om
          
          # ZAP XML results to SARIF conversion
          if [ -f "${{ github.workspace }}/zap-reports/zap-baseline-report.xml" ]; then
            python3 -c "
          import json
          import xml.etree.ElementTree as ET
          from datetime import datetime

          def zap_to_sarif(xml_file, sarif_file):
              tree = ET.parse(xml_file)
              root = tree.getroot()
              
              sarif = {
                  'version': '2.1.0',
                  'runs': [{
                      'tool': {
                          'driver': {
                              'name': 'OWASP ZAP',
                              'version': '2.14.0',
                              'informationUri': 'https://owasp.org/www-project-zap/'
                          }
                      },
                      'results': []
                  }]
              }
              
              for site in root.findall('.//site'):
                  for alert in site.findall('.//alertitem'):
                      name = alert.find('name')
                      desc = alert.find('desc')
                      risk = alert.find('riskdesc')
                      confidence = alert.find('confidence')
                      uri = alert.find('uri')
                      
                      if name is not None and desc is not None:
                          result = {
                              'ruleId': name.text,
                              'message': {'text': desc.text or 'No description'},
                              'level': 'warning',
                              'locations': [{
                                  'physicalLocation': {
                                      'artifactLocation': {
                                          'uri': uri.text if uri is not None else 'unknown'
                                      }
                                  }
                              }]
                          }
                          
                          if risk is not None:
                              if 'High' in risk.text:
                                  result['level'] = 'error'
                              elif 'Medium' in risk.text:
                                  result['level'] = 'warning'
                              else:
                                  result['level'] = 'note'
                          
                          sarif['runs'][0]['results'].append(result)
              
              with open(sarif_file, 'w') as f:
                  json.dump(sarif, f, indent=2)

          if __name__ == '__main__':
              zap_to_sarif('${{ github.workspace }}/zap-reports/zap-baseline-report.xml', '${{ github.workspace }}/zap-reports/zap-baseline.sarif')
          "
                  fi

      - name: Upload ZAP SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ github.workspace }}/zap-reports/zap-baseline.sarif
          category: "zap-baseline"
        if: always() && hashFiles('${{ github.workspace }}/zap-reports/zap-baseline.sarif') != ''

      - name: Cleanup Docker
        if: always()
        run: |
          docker stop test-app || true
          docker rm test-app || true
          docker network rm dast-network || true